---

- include_tasks: configure-manually.yml
  when: ansible_os_family in ['Debian']

- include_tasks: configure-client.yml
  when: ansible_os_family in ['RedHat']


### KERBEROS


- name: Install and configure Kerberos in client mode
  include_role:
    name: kerberos-client
  vars:
    kerberos_client__keytab_deploy_remote_host: '{{ freeipa_client__ipa_enroll_host }}'
    kerberos_client__keytab_principal: '{{ freeipa_client__keytab_principal }}'
    kerberos_client__keytab_deploy_tmp_file: '{{ freeipa_client__krb_keytab_tmp_file }}'
    kerberos_client__keytab_deploy_remote_genkey_command: "echo '{{ freeipa_client__ipa_enroll_pass }}' | kinit '{{ freeipa_client__ipa_enroll_user }}' && ipa-getkeytab --principal {{ freeipa_client__keytab_principal|replace('@'~freeipa_client__realm, '') }} --keytab {{ freeipa_client__krb_keytab_tmp_file }}; ret=$?; kdestroy; exit $?"
    kerberos_client__keytab_deploy_remote_genkey_nolog: true
    kerberos_client__include_dirs:
      - /var/lib/sss/pubconf/krb5.include.d
    kerberos_client__defaults:
      default_realm:        '{{ freeipa_client__realm }}'
      dns_lookup_realm:     'false'
      dns_lookup_kdc:       'false'
      rdns:                 'false'
      ticket_lifetime:      24h
      forwardable:          'true'
      udp_preference_limit: 0
    kerberos_client__realms: "{{ {}|combine({
      freeipa_client__realm: {
        'kdc': freeipa_client__server,
        'master_kdc': freeipa_client__server,
        'admin_server': freeipa_client__server,
        'kpasswd_server': freeipa_client__server,
        'default_domain': freeipa_client__domain,
        'pkinit_anchors': 'FILE:'~freeipa_client__ca_path,
        'pkinit_pool': 'FILE:'~freeipa_client__ca_path
      }
    }) }}"
    kerberos_client__domains: "{{
        {
          freeipa_client__domain: freeipa_client__realm,
          '.'~freeipa_client__domain: freeipa_client__realm,
          ansible_fqdn: freeipa_client__realm
        }|
        combine( {} if ansible_domain == freeipa_client__domain else {
            ansible_domain: freeipa_client__realm,
            '.'~ansible_domain: freeipa_client__realm
          })|
        combine( {} if (freeipa_client__realm|lower) == freeipa_client__domain else {
            (freeipa_client__realm|lower): freeipa_client__realm,
            '.'~(freeipa_client__realm|lower): freeipa_client__realm
        })
     }}"
    kerberos_client__dbmodules: "{{ {}|combine({
      freeipa_client__realm: ( {}|
        combine({'db_library': 'ipadb.so'} if freeipa_client__is_ipaserver else {})
      )
    }) }}"



# SSSD


- name: Install and configure SSSD
  include_role:
    name: sssd
  vars:
    sssd__services: "{{ sssd__services_base|union(['ifp'] if freeipa_client__is_ipaserver else []) }}"
    sssd__services_base:
      - sudo
      - nss
      - pam
      - ssh
    sssd__services_settings:
      nss:
        homedir_substring: /home
        memcache_timeout: '{{ 600 if freeipa_client__is_ipaserver else 300 }}'
    sssd__domains: ['{{ freeipa_client__realm|lower }}']
    sssd__domains_settings: "{{ {}|combine({
      (freeipa_client__realm|lower): {
        'cache_credentials': 'True',
        'krb5_store_password_if_offline': 'True',
        'id_provider': 'ipa',
        'auth_provider': 'ipa',
        'access_provider': 'ipa',
        'chpass_provider': 'ipa',
        'ipa_domain': (freeipa_client__realm|lower),
        'ldap_tls_cacert': freeipa_client__ca_path,
        'ipa_hostname': ansible_fqdn,
        'ipa_server': (['_srv_'] if not freeipa_client__is_ipaserver else [])|union([freeipa_client__server])|join(', '),
        'ipa_server_mode': 'True' if freeipa_client__is_ipaserver else 'False',
        'dns_discovery_domain': freeipa_client__domain,
      }
    }) }}"

- name: Update host informations in FreeIPA server
  ipa_host:
    description:          '{{ freeipa_client__ipa_description|d(omit) }}'
    fqdn:                 '{{ freeipa_client__ipa_fqdn }}'
    ip_address:           '{{ freeipa_client__ipa_dns_ip|d(omit) }}'
    mac_address:          '{{ _freeipa_client__mac_addresses|d([]) }}'
    ns_hardware_platform: '{{ freeipa_client__ipa_ns_hardware_platform|d(omit) }}'
    ns_host_location:     '{{ freeipa_client__ipa_ns_host_location|d(omit) }}'
    ns_os_version:        '{{ freeipa_client__ipa_ns_os_version }}'
    ipa_host:             '{{ freeipa_client__ipa_enroll_host }}'
    ipa_pass:             '{{ freeipa_client__ipa_enroll_pass }}'
    ipa_user:             '{{ freeipa_client__ipa_enroll_user }}'
    state:                present
  register: _freeipa_client__manual_host_register
  failed_when: "_freeipa_client__manual_host_register.msg is defined and
        _freeipa_client__manual_host_register.msg != 'response host_mod: no modifications to be performed'"
  ignore_errors: true
  delegate_to: "{{ freeipa_client__ipa_delegate_to if freeipa_client__ipa_delegate_to is defined else omit }}"

#- name: Ensure DNS zone exists
  #ipa_dnszone:
    #zone_name: '{{ freeipa_client__ipa_dns_zone_name }}'
    #ipa_host:  '{{ freeipa_client__ipa_enroll_host }}'
    #ipa_pass:  '{{ freeipa_client__ipa_enroll_pass }}'
    #ipa_user:  '{{ freeipa_client__ipa_enroll_user }}'
    #state:     present
  #when: freeipa_client__ipa_sshfp_update or freeipa_client__ipa_dns_update
  #ignore_errors: true
  #delegate_to: "{{ freeipa_client__ipa_delegate_to if freeipa_client__ipa_delegate_to is defined else omit }}"

- name: Ensure DNS entry exists
  ipa_dnsrecord:
    zone_name:    '{{ freeipa_client__ipa_dns_zone_name }}'
    record_name:  '{{ item.name }}'
    record_type:  "{{ item.type|d('A') }}"
    record_value: '{{ item.data }}'
    ipa_host:     '{{ freeipa_client__ipa_enroll_host }}'
    ipa_pass:     '{{ freeipa_client__ipa_enroll_pass }}'
    ipa_user:     '{{ freeipa_client__ipa_enroll_user }}'
    state:        present
  with_items: '{{ freeipa_client__ipa_dns_records }}'
  when: freeipa_client__ipa_dns_update
  ignore_errors: true
  delegate_to: "{{ freeipa_client__ipa_delegate_to if freeipa_client__ipa_delegate_to is defined else omit }}"

- name: Update SSHFP DNS records for host
  shell: >
    ( echo '{{ freeipa_client__ipa_enroll_pass }}' | kinit '{{ freeipa_client__ipa_enroll_user }}' ) &&
    ( if [[ $(ipa dnsrecord_show '{{ freeipa_client__ipa_dns_zone_name }}' '{{ freeipa_client__ipa_dns_entry_name }}' --raw | grep --count --extended-regexp '({{ _freeipa_client__sshfp_keys|map(attribute="fingerprint")|list|join("|") }})') -ne {{ _freeipa_client__sshfp_keys|length }} ]]; then
    ipa dnsrecord_mod '{{ freeipa_client__ipa_dns_zone_name }}' '{{ freeipa_client__ipa_dns_entry_name }}' {% for item in _freeipa_client__sshfp_keys %} --sshfp-rec='{{ item["algorythm"] }} {{ item["digest_type"] }} {{ item["fingerprint"] }}'{% endfor %} && echo '_UPDATE_';
    result=$?
    );
    kdestroy;
    exit $result
  when: freeipa_client__ipa_sshfp_update
  register: _freeipa_client__sshfp_update
  ignore_errors: true
  changed_when: _freeipa_client__sshfp_update|search('_UPDATE_') or (not _freeipa_client__sshfp_update.stderr|search('response host_mod: no modifications to be performed'))
  delegate_to: "{{ freeipa_client__ipa_delegate_to if freeipa_client__ipa_delegate_to is defined else omit }}"

- name: Create hostgroups in FreeIPA server
  ipa_hostgroup:
    cn:          '{{ item.name }}'
    description: "{{ item.description|d('') }}"
    hostgroup:   '{{ item.hostgroup|d(omit) }}'
    ipa_host:    '{{ freeipa_client__ipa_enroll_host }}'
    ipa_pass:    '{{ freeipa_client__ipa_enroll_pass }}'
    ipa_user:    '{{ freeipa_client__ipa_enroll_user }}'
    state:       "{{ item.state|d('present') }}"
  with_items: '{{ freeipa_client__ipa_hostgroups_rules }}'
  when: freeipa_client__ipa_hostgroups_update
  register: _freeipa_client__hostgroups
  failed_when: "_freeipa_client__hostgroups.msg is defined and
        _freeipa_client__hostgroups.msg != 'response host_mod: no modifications to be performed'"
  ignore_errors: true
  delegate_to: "{{ freeipa_client__ipa_delegate_to if freeipa_client__ipa_delegate_to is defined else omit }}"

- name: Add this host to location hostgroup members in FreeIPA server
  ipa_hostgroup:
    cn:       '{{ item.hostgroup.cn[0] }}'
    host:     '{{ item.hostgroup.member_host|d([]) + [freeipa_client__ipa_fqdn] }}'
    ipa_host: '{{ freeipa_client__ipa_enroll_host }}'
    ipa_pass: '{{ freeipa_client__ipa_enroll_pass }}'
    ipa_user: '{{ freeipa_client__ipa_enroll_user }}'
    state:    "{{ item.state|d('present') }}"
  with_items: '{{ _freeipa_client__hostgroups.results }}'
  when: freeipa_client__ipa_hostgroups_update and
          _freeipa_client__hostgroups|success and
          item.hostgroup.cn|length == 1 and
          freeipa_client__ipa_fqdn not in item.hostgroup.member_host|d([])
  register: _freeipa_client__hostgroups_member
  failed_when: "_freeipa_client__hostgroups_member.msg is defined and
        _freeipa_client__hostgroups_member.msg != 'response host_mod: no modifications to be performed'"
  ignore_errors: true
  delegate_to: "{{ freeipa_client__ipa_delegate_to if freeipa_client__ipa_delegate_to is defined else omit }}"

- import_tasks: configure-pam.yml
